var check = require('check-types');
var mysql    = require('mysql');

var db = mysql.createConnection({
  host      : "localhost",
  user      : "atm",
  password  : "Emorage00",
  database  : "banknode"
});

db.connect();

  module.exports = {
  
  getBank: function() {
    return { id: 02, Naam: "MLB" };
  },

  getTokenRights: function(token) {
    return getTokenRights(token);
  },
  
  getBalance: function(accnr, callback) {
    var errorNr = 0;
    var rtn = {};
    if(accnr.length < 1) errorNr = 1;
    
    db.query("SELECT balance FROM Account WHERE accountNumber = " + parseInt(accnr), function(err, rows, fields) {
      if(err){
		  callback(error(4));
          return;
	  }
	  else{
		  if(rows.length < 1) 
			errorNr = 1;
		  else {
			var mySaldo = rows[0].balance; 
			rtn = { bankid: 02, pasid: parseInt(accnr), saldo: parseInt(mySaldo) };
		  }

		  if(errorNr > 0)
			callback(error(errorNr));
		  else
			callback(rtn);
	  }
    });
  },

  changeBalance: function(accnr, changedValue, token, cBCallback) {
    var errorNr = 0;
    var rtn = {};
    changedValue = parseInt(changedValue);
    if(getTokenRights(token) < 2) {
      cBCallback(error(6));
      return;
    } 
    module.exports.getBalance(accnr, function(item) {
      if(item.error) { 
        cBCallback(item); 
      } 
      else {
        db.query("UPDATE Account SET balance = " + (item.saldo-changedValue) + " WHERE accountNumber = " + parseInt(accnr), function(err, res) {
          if(err){
			  cBCallback(error(4));
		  }
		  else{
			item.saldo = parseInt((item.saldo-changedValue));
			cBCallback(item);
		  }
        });
      }
    }); 
  },
  getError: function(nr) {
    return error(nr);
  }

};

function getTokenRights(token) {
  return 1;
}

function error(nr) {
  var msg = "";
  switch(nr) {
    case 1: msg = "Bank nr unknown!";
    break;
    case 2: msg = "Database error.";
    break;
    case 3: msg = "Not enough balance.";
	break;
	case 4: msg = "MySQL error";
	break;
    case 5: msg = "Invalid token or none provided, use ?token=";
	break;
    case 6: msg = "Not enough permissions, request a Token with more permissions.";
    break;
  }
  return { error: nr, message: msg };
}
